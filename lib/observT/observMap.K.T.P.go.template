package P

import "buildblast/lib/observ"

type ObservMapCallback_K_T func (key K, value T)

//Not thread safe
type ObservMap_K_T struct {
	base *observ.ObservMap
}

func NewObservMap_K_T(owner observ.DisposeExposed) *ObservMap_K_T {
	return &ObservMap_K_T{observ.NewObservMap(owner)}
}

func (o *ObservMap_K_T) Get(key K) T {
	return o.base.Get(key).(T)
}

func (o *ObservMap_K_T) Set(key K, value T) {
	o.base.Set(key, value)
}

func (o *ObservMap_K_T) Delete(key K) {
	o.base.Delete(key)
}

func (o *ObservMap_K_T) OnAdd(owner observ.CallbackOwner, callback ObservMapCallback_K_T) int {
	return o.base.OnAdd(owner, func(key observ.Object, value observ.Object) {
		callback(key.(K), value.(T))
	})
}
func (o *ObservMap_K_T) OffAdd(callbackNum int) {
	o.base.OffAdd(callbackNum)
}

func (o *ObservMap_K_T) OnRemove(owner observ.CallbackOwner, callback ObservMapCallback_K_T) int {
	return o.base.OnRemove(owner, func(key observ.Object, value observ.Object) {
		callback(key.(K), value.(T))
	})
}
func (o *ObservMap_K_T) OffRemove(callbackNum int) {
	o.base.OffRemove(callbackNum)
}

func (o *ObservMap_K_T) OnChange(owner observ.CallbackOwner, callback ObservMapCallback_K_T) int {
	return o.base.OnChange(owner, func(key observ.Object, value observ.Object) {
		callback(key.(K), value.(T))
	})
}
func (o *ObservMap_K_T) OffChange(callbackNum int) {
	o.base.OffChange(callbackNum)
}

func (o *ObservMap_K_T) GetKeys() []K {
    keys := []K{}
    for _, key := range o.base.GetKeys() {
        keys = append(keys, key.(K))
    }
    return keys
}
func (o *ObservMap_K_T) GetValues() []T {
    values := []T{}
    for _, value := range o.base.GetValues() {
        values = append(values, value.(T))
    }
    return values
}

func (o *ObservMap_K_T) Clear() {
    o.base.Clear()
}