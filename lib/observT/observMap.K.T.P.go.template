package P

import "buildblast/lib/observ"

type ObservMapCallback func (key K, value T)

//Not thread safe
type ObservMap_K_T struct {
	base *observ.ObservMap
}

func NewObservMap_K_T(owner observ.DisposeExposed) *ObservMap_K_T {
	return &ObservMap_K_T{observ.NewObservMap(owner)}
}

func (o *ObservMap_K_T) Set(key K, value T) {
	o.base.set(observ.KVP{key, value})
}

func (o *ObservMap_K_T) Delete(key K) {
	o.base.set(observ.KVP{key, nil})
}

func (o *ObservMap_K_T) GetKeys() []K {
    keys := []K{}
    for key, _ := range o.data {
        keys = append(keys, key)
    }
    return keys
}
func (o *ObservMap_K_T) GetValues() []T {
    values := []T{}
    for _, value := range o.data {
        values = append(values, value)
    }
    return values
}

func (o *ObservMap_K_T) Clear() {
    for key, _ := range o.data {
        o.Delete(key)
    }
}